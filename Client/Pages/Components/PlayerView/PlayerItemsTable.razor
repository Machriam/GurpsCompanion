@using GurpsCompanion.Shared.DataModel
@using GurpsCompanion.Shared
@using GurpsCompanion.Shared.Features.PlayerView
@inject HttpClient Http
@inject PlayerViewEventBus EventBus
@inject IEncumbranceCalculator EncumbranceCalculator
<div class="row col-md-12">
    <label class="col-form-label-lg col-md-2"> @TotalMoney.ToString("C2") </label>
    <label class="col-form-label-lg col-md-2"> Weight: @TotalWeight.ToString("N2") </label>
    <label class="col-form-label-lg col-md-3"> @Encumbrance.Description </label>
    <label class="col-form-label-lg col-md-2"> BM: @Encumbrance.BM </label>
    <label class="col-form-label-lg col-md-2"> Dodge: @Encumbrance.Dodge </label>
</div>

<table class="table-sm col-md-12" style="height:500px; overflow-y:scroll;display:block">
    @foreach (var item in Items)
    {
        <tr class="col-md-12 @(SelectedRow==item?"table-active":"")" style="padding:0">
            <td><input type="checkbox" style="transform:scale(1.5)" checked="@item.Equipped" @onclick="()=>EquipItem(item)" /></td>
            <td><input type="number" style="width:100px" @bind-value="item.Count" @onblur="()=> ChangeCount(item,item.Count)" /></td>
            <td @onclick="()=>OnItemSelected(item)">
                <b>@item.Name</b><br />@item.Price.ToString("C2") - @item.Weight.ToString() BL
            </td>
            <td @onclick="()=>OnItemSelected(item)"> @item.Description </td>
        </tr>
    }
</table>
@code {
    public ItemModel SelectedRow { get; set; }
    [Parameter]
    public IEnumerable<ItemModel> Items { get; set; }
    [Parameter]
    public CharacterModel SelectedCharacter { get; set; }
    public double TotalMoney => Items.Sum(i => i.Price * i.Count);
    public double TotalWeight => Items.Where(i => i.Equipped).Sum(i => i.Weight * i.Count);
    public EncumbranceModel Encumbrance => EncumbranceCalculator.GetEncumbrance(SelectedCharacter.BasicLift, TotalWeight,
    SelectedCharacter.BasicMove, SelectedCharacter.Dodge);
    public void OnItemSelected(ItemModel item)
    {
        SelectedRow = item;
        EventBus.InvokeSelectedItemChanged(item.Clone());
    }

    public async void EquipItem(ItemModel model)
    {
        model.Equipped = !model.Equipped;
        using var _ = await Http.PutAsJsonAsync(ApiAddressResources.Item_EquipItem, model).ConfigureAwait(false);
    }

    public async void ChangeCount(ItemModel model, long newValue)
    {
        model.Count = newValue;
        using var _ = await Http.PutAsJsonAsync(ApiAddressResources.Item_ChangeCount, model).ConfigureAwait(false);
    }
}