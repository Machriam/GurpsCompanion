@using GurpsCompanion.Shared.DataModel
<table class="table-sm col-md-12" style="height:500px; overflow-y:scroll;display:block">
    @foreach (var item in Items)
    {
        Action ClickAction = () => { SelectedItemModel = item.Clone(); SelectedRow = item; };
        <tr class="col-md-12 @(SelectedRow==item?"table-active":"")" style="padding:0">
            <td><InputCheckbox style="transform:scale(1.5)" @bind-Value="item.Equipped" @onclick="()=>EquipItem(item)"></InputCheckbox></td>
            <td><InputNumber style="width:100px" @bind-Value="item.Count" @onblur="()=> ChangeCount(item,item.Count)"></InputNumber> </td>
            <td @onclick="ClickAction">
                <b>@item.Name</b><br />@item.Price.ToString("C2") - @item.Weight.ToString() BL
            </td>
            <td @onclick="ClickAction"> @item.Description </td>
        </tr>
    }
</table>
@code {
    protected override bool ShouldRender()
    {
        return false;
    }
    public ItemModel SelectedRow { get; set; }
    [Parameter]
    public Action<ItemModel, long> ChangeCount { get; set; }
    [Parameter]
    public Action<ItemModel> EquipItem { get; set; }
    [Parameter]
    public IEnumerable<ItemModel> Items { get; set; }
    private ItemModel _selectedItemModel;
    [Parameter]
    public ItemModel SelectedItemModel
    {
        get => _selectedItemModel; set
        {
            if (value == _selectedItemModel) return;
            _selectedItemModel = value;
            SelectedItemModelChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<ItemModel> SelectedItemModelChanged { get; set; }
}